/* Generated By:JavaCC: Do not edit this line. jplot3dp.MathParser.java */

package jplot3dp.MathParser;

import java.lang.Math;


        public class MathParser implements MathParserConstants {
                private java.util.HashMap userVars=new java.util.HashMap();
                public MathParser() {
                        this(new java.io.StringReader(""));
                        resetVariables();
                }
                public void resetVariables() {
                        userVars.clear();
                        setVariable("Pi",Math.PI);
                        setVariable("E",Math.E);
                }
                public void setVariable(String varName,double varValue) {
                        //userVars.put(varName.toUpperCase(),new Double(varValue));
                        userVars.put(varName,new Double(varValue));
                }
                public double getVariable(String varName) {
                        //varName=varName.toUpperCase();
                        if (userVars.containsKey(varName))
                                return ((Double)userVars.get(varName)).doubleValue();
                        else return 0;
                }
                public double parseExpression(String s) throws ParseException {
//			try {
                                ReInit(new java.io.StringReader(s+";"));
                                return Go();
//			} catch (Exception e) {
//				return Double.NaN;
//			}
                }

  final public double GetNextTerm() throws ParseException, NumberFormatException {
        Token t;
        double d,d2;
        String fn=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      d = ParseLevel3();
         {if (true) return -d;}
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
         {if (true) return Double.parseDouble(t.image);}
      break;
    case VARNAME:
      t = jj_consume_token(VARNAME);
         {if (true) return getVariable(t.image);}
      break;
    case BRACE_OPEN:
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
         {if (true) return d;}
      break;
    case ATAN2:
      jj_consume_token(ATAN2);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(60);
      d2 = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                                         {if (true) return Math.atan2(d,d2);}
      break;
    case SIN:
      jj_consume_token(SIN);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                   {if (true) return Math.sin(d);}
      break;
    case COS:
      jj_consume_token(COS);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                   {if (true) return Math.cos(d);}
      break;
    case TAN:
      jj_consume_token(TAN);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                   {if (true) return Math.tan(d);}
      break;
    case COSEC:
      jj_consume_token(COSEC);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                     {if (true) return 1/Math.sin(d);}
      break;
    case SEC:
      jj_consume_token(SEC);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                   {if (true) return 1/Math.cos(d);}
      break;
    case COT:
      jj_consume_token(COT);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                   {if (true) return 1/Math.tan(d);}
      break;
    case ARCSIN:
      jj_consume_token(ARCSIN);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                      {if (true) return Math.asin(d);}
      break;
    case ARCCOS:
      jj_consume_token(ARCCOS);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                      {if (true) return Math.acos(d);}
      break;
    case ARCTAN:
      jj_consume_token(ARCTAN);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                      {if (true) return Math.atan(d);}
      break;
    case ARCCOSEC:
      jj_consume_token(ARCCOSEC);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                        {if (true) return Math.asin(1/d);}
      break;
    case ARCSEC:
      jj_consume_token(ARCSEC);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                      {if (true) return Math.acos(1/d);}
      break;
    case ARCCOT:
      jj_consume_token(ARCCOT);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                      {if (true) return Math.atan(1/d);}
      break;
    case SINH:
      jj_consume_token(SINH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    {if (true) return (Math.exp(d)-Math.exp(-d))/2;}
      break;
    case COSH:
      jj_consume_token(COSH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    {if (true) return (Math.exp(d)+Math.exp(-d))/2;}
      break;
    case TANH:
      jj_consume_token(TANH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    {if (true) return (Math.exp(d)-Math.exp(-d))/(Math.exp(d)+Math.exp(-d));}
      break;
    case COSECH:
      jj_consume_token(COSECH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                      {if (true) return 2/(Math.exp(d)-Math.exp(-d));}
      break;
    case SECH:
      jj_consume_token(SECH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    {if (true) return 2/(Math.exp(d)+Math.exp(-d));}
      break;
    case COTH:
      jj_consume_token(COTH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    {if (true) return (Math.exp(d)+Math.exp(-d))/(Math.exp(d)-Math.exp(-d));}
      break;
    case ARCSINH:
      jj_consume_token(ARCSINH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                       {if (true) return Math.log(d+Math.sqrt(d*d+1));}
      break;
    case ARCCOSH:
      jj_consume_token(ARCCOSH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                       {if (true) return Math.log(d+Math.sqrt(d*d-1));}
      break;
    case ARCTANH:
      jj_consume_token(ARCTANH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                       {if (true) return Math.log((1+d)/(1-d))/2;}
      break;
    case ARCCOSECH:
      jj_consume_token(ARCCOSECH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                         {if (true) return Math.log(Math.sqrt(1/d/d-1)+1/d);}
      break;
    case ARCSECH:
      jj_consume_token(ARCSECH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                       {if (true) return Math.log(Math.sqrt(1/d/d-1)+1/d);}
      break;
    case ARCCOTH:
      jj_consume_token(ARCCOTH);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                       {if (true) return Math.log((d+1)/(d-1))/2;}
      break;
    case SQRT:
      jj_consume_token(SQRT);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    {if (true) return Math.sqrt(d);}
      break;
    case EXP:
      jj_consume_token(EXP);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                   {if (true) return Math.exp(d);}
      break;
    case LN:
      jj_consume_token(LN);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                  {if (true) return Math.log(d);}
      break;
    case LOG10:
      jj_consume_token(LOG10);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                     {if (true) return Math.log(d)/Math.log(10);}
      break;
    case LOG2:
      jj_consume_token(LOG2);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    {if (true) return Math.tan(d)/Math.log(2);}
      break;
    case ABS:
      jj_consume_token(ABS);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    {if (true) return Math.abs(d);}
      break;
    case FLOOR:
      jj_consume_token(FLOOR);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                     {if (true) return Math.floor(d);}
      break;
    case SIGN:
      jj_consume_token(SIGN);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    if (d>0) {if (true) return 1;} else if (d<0) {if (true) return -1;} else {if (true) return 0;}
      break;
    case CEIL:
      jj_consume_token(CEIL);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    {if (true) return Math.ceil(d);}
      break;
    case FRAC:
      jj_consume_token(FRAC);
      jj_consume_token(BRACE_OPEN);
      d = Expression();
      jj_consume_token(BRACE_CLOSE);
                                                    {if (true) return d-Math.floor(d);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public double Go() throws ParseException {
        Token t;
        double x=0;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END_STATEMENT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(END_STATEMENT);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case BRACE_OPEN:
      case ATAN2:
      case SIN:
      case COS:
      case TAN:
      case COSEC:
      case SEC:
      case COT:
      case ARCSIN:
      case ARCCOS:
      case ARCTAN:
      case ARCCOSEC:
      case ARCSEC:
      case ARCCOT:
      case SINH:
      case COSH:
      case TANH:
      case COSECH:
      case SECH:
      case COTH:
      case ARCSINH:
      case ARCCOSH:
      case ARCTANH:
      case ARCCOSECH:
      case ARCSECH:
      case ARCCOTH:
      case SQRT:
      case EXP:
      case LN:
      case LOG10:
      case LOG2:
      case ABS:
      case FLOOR:
      case SIGN:
      case CEIL:
      case FRAC:
      case NUMBER:
      case VARNAME:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      if (jj_2_1(2)) {
        x = Expression();
        label_3:
        while (true) {
          jj_consume_token(END_STATEMENT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case END_STATEMENT:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARNAME:
          t = jj_consume_token(VARNAME);
          jj_consume_token(EQUALTO);
          x = Expression();
                  setVariable(t.image,x);
          label_4:
          while (true) {
            jj_consume_token(END_STATEMENT);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case END_STATEMENT:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_4;
            }
          }
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
         {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public double Expression() throws ParseException, NumberFormatException {
        double value,x;
    value = ParseLevel1();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case NOTEQUALS:
      case GREATER:
      case GREATEREQ:
      case LESSER:
      case LESSEREQ:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        x = ParseLevel1();
                 value=(value==x)?1:0;
        break;
      case NOTEQUALS:
        jj_consume_token(NOTEQUALS);
        x = ParseLevel1();
                 value=(value!=x)?1:0;
        break;
      case LESSER:
        jj_consume_token(LESSER);
        x = ParseLevel1();
                 value=(value<x)?1:0;
        break;
      case LESSEREQ:
        jj_consume_token(LESSEREQ);
        x = ParseLevel1();
                 value=(value<=x)?1:0;
        break;
      case GREATER:
        jj_consume_token(GREATER);
        x = ParseLevel1();
                 value=(value>x)?1:0;
        break;
      case GREATEREQ:
        jj_consume_token(GREATEREQ);
        x = ParseLevel1();
                 value=(value>=x)?1:0;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public double ParseLevel1() throws ParseException, NumberFormatException {
        double value,x;
    value = ParseLevel2();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        x = ParseLevel2();
                 value+=x;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        x = ParseLevel2();
                 value-=x;
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public double ParseLevel2() throws ParseException, NumberFormatException {
        double value,x;
    value = ParseLevel3();
    label_7:
    while (true) {
      if (jj_2_2(1)) {
        ;
      } else {
        break label_7;
      }
      if (jj_2_3(1)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          x = ParseLevel3();
          break;
        default:
          jj_la1[10] = jj_gen;
          if (getToken(1).kind!=MINUS) {
            x = ParseLevel3();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
                 value*=x;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIVIDE:
          jj_consume_token(DIVIDE);
          x = ParseLevel3();
                 value/=x;
          break;
        case MODULO:
          jj_consume_token(MODULO);
          x = ParseLevel3();
                 value%=x;
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
         {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public double ParseLevel3() throws ParseException, NumberFormatException {
        double value,x;
    value = GetNextTerm();
    label_8:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(POWER);
      x = ParseLevel3();
                 value=Math.pow(value,x);
    }
         {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3R_14() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(MODULO)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind!=MINUS;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_13()) return true;
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(FRAC)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(CEIL)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(SIGN)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(FLOOR)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(ABS)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(LOG2)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(LOG10)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(LN)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(EXP)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(SQRT)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(ARCCOTH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(ARCSECH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(ARCCOSECH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(ARCTANH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(ARCCOSH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(ARCSINH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(COTH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(SECH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(COSECH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(TANH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(COSH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(SINH)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(ARCCOT)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(ARCSEC)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(ARCCOSEC)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(ARCTAN)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(ARCCOS)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(ARCSIN)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(COT)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(SEC)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(BRACE_OPEN)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(COSEC)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(GREATEREQ)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(TAN)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(COS)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(VARNAME)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(SIN)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(ATAN2)) return true;
    if (jj_scan_token(BRACE_OPEN)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(LESSEREQ)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(LESSER)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(NOTEQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(POWER)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    Token xsp;
    if (jj_scan_token(3)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(3)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  public MathParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xffc84000,0x8,0xffc84000,0x8,0x8,0x0,0x1f80,0x1f80,0x6000,0x6000,0x8000,0x30000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x7ffffff,0x0,0x7ffffff,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public MathParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MathParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MathParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MathParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MathParser(MathParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(MathParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[61];
    for (int i = 0; i < 61; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

//		public static void main(String[] args) throws ParseException, TokenMgrError {
//			jplot3dp.MathParser testParser=new jplot3dp.MathParser(System.in);
//			testParser.ReInit(new java.io.StringReader("y=.3 *-.1\r\ny;"));
//			System.out.println(testParser.Go());
//		}
        }
